from django.db import models

class ClientRegister_Model(models.Model):
    username = models.CharField(max_length=30)
    email = models.EmailField(max_length=30)
    password = models.CharField(max_length=10)
    phoneno = models.CharField(max_length=10)
    country = models.CharField(max_length=30)
    state = models.CharField(max_length=30)
    city = models.CharField(max_length=30)
    gender = models.CharField(max_length=30)
    address = models.CharField(max_length=30)

class insurance_claim_frauds(models.Model):
    RID = models.CharField(max_length=3000)
    Sum_Insured = models.CharField(max_length=3000)
    age = models.CharField(max_length=3000)
    sex = models.CharField(max_length=3000)
    weight = models.CharField(max_length=3000)
    bmi = models.CharField(max_length=3000)
    hereditary_diseases = models.CharField(max_length=3000)
    no_of_dependents = models.CharField(max_length=3000)
    smoker = models.CharField(max_length=3000)
    city = models.CharField(max_length=3000)
    bloodpressure = models.CharField(max_length=3000)
    diabetes = models.CharField(max_length=3000)
    regular_ex = models.CharField(max_length=3000)
    job_title = models.CharField(max_length=3000)
    claim = models.CharField(max_length=3000)
    Prediction = models.CharField(max_length=3000)

class detection_accuracy(models.Model):
    names = models.CharField(max_length=300)
    ratio = models.CharField(max_length=300)

class detection_ratio(models.Model):
    names = models.CharField(max_length=300)
    ratio = models.CharField(max_length=300)
from django import forms
from Remote_User.models import ClientRegister_Model

class ClientRegisterForm(forms.ModelForm):
    password = forms.CharField(widget=forms.PasswordInput())
    email = forms.EmailField(required=True)

    class Meta:
        model = ClientRegister_Model
        fields = ("username", "email", "password", "phoneno", "country", "state", "city", "gender", "address")
from django.shortcuts import render, redirect
from django.contrib import messages
from Remote_User.models import ClientRegister_Model, insurance_claim_frauds
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn import svm
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import VotingClassifier
import pandas as pd

def login(request):
    if request.method == "POST" and 'submit' in request.POST:
        username = request.POST.get('username')
        password = request.POST.get('password')
        try:
            user = ClientRegister_Model.objects.get(username=username, password=password)
            request.session["userid"] = user.id
            return redirect('view_profile')
        except ClientRegister_Model.DoesNotExist:
            messages.error(request, "Invalid credentials")
    return render(request, "RUser/login.html")

def index(request):
    return render(request, "RUser/index.html")

def add_dataset_details(request):
    return render(request, 'RUser/Add_DataSet_Details.html', {"excel_data": ""})

def register(request):
    if request.method == "POST":
        data = {
            "username": request.POST.get("username"),
            "email": request.POST.get("email"),
            "password": request.POST.get("password"),
            "phoneno": request.POST.get("phoneno"),
            "country": request.POST.get("country"),
            "state": request.POST.get("state"),
            "city": request.POST.get("city"),
            "gender": request.POST.get("gender"),
            "address": request.POST.get("address"),
        }
        ClientRegister_Model.objects.create(**data)
        obj = "Registered Successfully"
        return render(request, "RUser/Register1.html", {"object": obj})
    return render(request, "RUser/Register1.html")

def view_profile(request):
    userid = request.session.get('userid')
    obj = ClientRegister_Model.objects.get(id=userid)
    return render(request, "RUser/ViewYourProfile.html", {"object": obj})

def predict_health_insurance_claim_fraud(request):
    if request.method == "POST":
        # Get user input
        form_data = {
            "RID": request.POST.get("RID"),
            "Sum_Insured": request.POST.get("Sum_Insured"),
            "age": request.POST.get("age"),
            "sex": request.POST.get("sex"),
            "weight": request.POST.get("weight"),
            "bmi": request.POST.get("bmi"),
            "hereditary_diseases": request.POST.get("hereditary_diseases"),
            "no_of_dependents": request.POST.get("no_of_dependents"),
            "smoker": request.POST.get("smoker"),
            "city": request.POST.get("city"),
            "bloodpressure": request.POST.get("bloodpressure"),
            "diabetes": request.POST.get("diabetes"),
            "regular_ex": request.POST.get("regular_ex"),
            "job_title": request.POST.get("job_title"),
            "claim": request.POST.get("claim")
        }

        # Load dataset
        df = pd.read_csv("Healthcare_Insurance.csv")

        # Apply label encoding or transformation
        def apply_response(label):
            return 0 if label == 0 else 1

        df['Results'] = df['Label'].apply(apply_response)

        cv = CountVectorizer()
        X = df['RID'].astype(str)
        y = df['Results']

        X_vectorized = cv.fit_transform(X)
        X_train, X_test, y_train, y_test = train_test_split(X_vectorized, y, test_size=0.2)

        models = []

        # SVM
        svm_model = svm.LinearSVC()
        svm_model.fit(X_train, y_train)
        models.append(('svm', svm_model))

        # Logistic Regression
        log_model = LogisticRegression(solver='lbfgs', random_state=0)
        log_model.fit(X_train, y_train)
        models.append(('logistic', log_model))

        # Decision Tree
        dt_model = DecisionTreeClassifier()
        dt_model.fit(X_train, y_train)
        models.append(('decision_tree', dt_model))

        # Ensemble Voting
        ensemble_model = VotingClassifier(estimators=models, voting='hard')
        ensemble_model.fit(X_train, y_train)

        # Predict
        user_vector = cv.transform([form_data['RID']]).toarray()
        prediction = ensemble_model.predict(user_vector)[0]

        val = 'No Fraud Detected' if prediction == 0 else 'Fraud Detected'

        # Save to DB
        insurance_claim_frauds.objects.create(**form_data, Prediction=val)

        return render(request, 'RUser/Predict_Health_Insurance_Claim_Fraud.html', {"object": val})

    return render(request, 'RUser/Predict_Health_Insurance_Claim_Fraud.html')